// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/tijanadmi/movieginmongoapi/repository (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	models "github.com/tijanadmi/movieginmongoapi/models"
	repository "github.com/tijanadmi/movieginmongoapi/repository"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddMovie mocks base method.
func (m *MockStore) AddMovie(arg0 context.Context, arg1 *models.Movie) (*models.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMovie", arg0, arg1)
	ret0, _ := ret[0].(*models.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMovie indicates an expected call of AddMovie.
func (mr *MockStoreMockRecorder) AddMovie(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMovie", reflect.TypeOf((*MockStore)(nil).AddMovie), arg0, arg1)
}

// AddRepertoire mocks base method.
func (m *MockStore) AddRepertoire(arg0 context.Context, arg1 *models.Repertoire) (*models.Repertoire, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRepertoire", arg0, arg1)
	ret0, _ := ret[0].(*models.Repertoire)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddRepertoire indicates an expected call of AddRepertoire.
func (mr *MockStoreMockRecorder) AddRepertoire(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRepertoire", reflect.TypeOf((*MockStore)(nil).AddRepertoire), arg0, arg1)
}

// AddReservation mocks base method.
func (m *MockStore) AddReservation(arg0 context.Context, arg1 repository.AddReservationParams) (*models.Reservation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddReservation", arg0, arg1)
	ret0, _ := ret[0].(*models.Reservation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddReservation indicates an expected call of AddReservation.
func (mr *MockStoreMockRecorder) AddReservation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddReservation", reflect.TypeOf((*MockStore)(nil).AddReservation), arg0, arg1)
}

// CancelReservation mocks base method.
func (m *MockStore) CancelReservation(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelReservation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelReservation indicates an expected call of CancelReservation.
func (mr *MockStoreMockRecorder) CancelReservation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelReservation", reflect.TypeOf((*MockStore)(nil).CancelReservation), arg0, arg1)
}

// DeleteHall mocks base method.
func (m *MockStore) DeleteHall(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHall", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHall indicates an expected call of DeleteHall.
func (mr *MockStoreMockRecorder) DeleteHall(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHall", reflect.TypeOf((*MockStore)(nil).DeleteHall), arg0, arg1)
}

// DeleteMovie mocks base method.
func (m *MockStore) DeleteMovie(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMovie", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMovie indicates an expected call of DeleteMovie.
func (mr *MockStoreMockRecorder) DeleteMovie(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMovie", reflect.TypeOf((*MockStore)(nil).DeleteMovie), arg0, arg1)
}

// DeleteRepertoire mocks base method.
func (m *MockStore) DeleteRepertoire(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRepertoire", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRepertoire indicates an expected call of DeleteRepertoire.
func (mr *MockStoreMockRecorder) DeleteRepertoire(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRepertoire", reflect.TypeOf((*MockStore)(nil).DeleteRepertoire), arg0, arg1)
}

// DeleteRepertoireForMovie mocks base method.
func (m *MockStore) DeleteRepertoireForMovie(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRepertoireForMovie", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRepertoireForMovie indicates an expected call of DeleteRepertoireForMovie.
func (mr *MockStoreMockRecorder) DeleteRepertoireForMovie(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRepertoireForMovie", reflect.TypeOf((*MockStore)(nil).DeleteRepertoireForMovie), arg0, arg1)
}

// DeleteReservation mocks base method.
func (m *MockStore) DeleteReservation(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReservation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteReservation indicates an expected call of DeleteReservation.
func (mr *MockStoreMockRecorder) DeleteReservation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReservation", reflect.TypeOf((*MockStore)(nil).DeleteReservation), arg0, arg1)
}

// GetAllRepertoireForMovie mocks base method.
func (m *MockStore) GetAllRepertoireForMovie(arg0 context.Context, arg1 string, arg2, arg3 time.Time) ([]models.Repertoire, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRepertoireForMovie", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]models.Repertoire)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRepertoireForMovie indicates an expected call of GetAllRepertoireForMovie.
func (mr *MockStoreMockRecorder) GetAllRepertoireForMovie(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRepertoireForMovie", reflect.TypeOf((*MockStore)(nil).GetAllRepertoireForMovie), arg0, arg1, arg2, arg3)
}

// GetAllReservationsForUser mocks base method.
func (m *MockStore) GetAllReservationsForUser(arg0 context.Context, arg1 string) ([]models.Reservation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllReservationsForUser", arg0, arg1)
	ret0, _ := ret[0].([]models.Reservation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllReservationsForUser indicates an expected call of GetAllReservationsForUser.
func (mr *MockStoreMockRecorder) GetAllReservationsForUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllReservationsForUser", reflect.TypeOf((*MockStore)(nil).GetAllReservationsForUser), arg0, arg1)
}

// GetHall mocks base method.
func (m *MockStore) GetHall(arg0 context.Context, arg1 string) ([]models.Hall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHall", arg0, arg1)
	ret0, _ := ret[0].([]models.Hall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHall indicates an expected call of GetHall.
func (mr *MockStoreMockRecorder) GetHall(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHall", reflect.TypeOf((*MockStore)(nil).GetHall), arg0, arg1)
}

// GetHallById mocks base method.
func (m *MockStore) GetHallById(arg0 context.Context, arg1 string) (*models.Hall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHallById", arg0, arg1)
	ret0, _ := ret[0].(*models.Hall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHallById indicates an expected call of GetHallById.
func (mr *MockStoreMockRecorder) GetHallById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHallById", reflect.TypeOf((*MockStore)(nil).GetHallById), arg0, arg1)
}

// GetMovie mocks base method.
func (m *MockStore) GetMovie(arg0 context.Context, arg1 string) (*models.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovie", arg0, arg1)
	ret0, _ := ret[0].(*models.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovie indicates an expected call of GetMovie.
func (mr *MockStoreMockRecorder) GetMovie(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovie", reflect.TypeOf((*MockStore)(nil).GetMovie), arg0, arg1)
}

// GetRepertoire mocks base method.
func (m *MockStore) GetRepertoire(arg0 context.Context, arg1 string) (*models.Repertoire, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepertoire", arg0, arg1)
	ret0, _ := ret[0].(*models.Repertoire)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepertoire indicates an expected call of GetRepertoire.
func (mr *MockStoreMockRecorder) GetRepertoire(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepertoire", reflect.TypeOf((*MockStore)(nil).GetRepertoire), arg0, arg1)
}

// GetRepertoireByMovieDateTimeHall mocks base method.
func (m *MockStore) GetRepertoireByMovieDateTimeHall(arg0 context.Context, arg1 string, arg2 time.Time, arg3, arg4 string) (models.Repertoire, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepertoireByMovieDateTimeHall", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(models.Repertoire)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepertoireByMovieDateTimeHall indicates an expected call of GetRepertoireByMovieDateTimeHall.
func (mr *MockStoreMockRecorder) GetRepertoireByMovieDateTimeHall(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepertoireByMovieDateTimeHall", reflect.TypeOf((*MockStore)(nil).GetRepertoireByMovieDateTimeHall), arg0, arg1, arg2, arg3, arg4)
}

// GetReservationById mocks base method.
func (m *MockStore) GetReservationById(arg0 context.Context, arg1 string) (*models.Reservation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReservationById", arg0, arg1)
	ret0, _ := ret[0].(*models.Reservation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReservationById indicates an expected call of GetReservationById.
func (mr *MockStoreMockRecorder) GetReservationById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReservationById", reflect.TypeOf((*MockStore)(nil).GetReservationById), arg0, arg1)
}

// GetUserByUsername mocks base method.
func (m *MockStore) GetUserByUsername(arg0 context.Context, arg1 string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", arg0, arg1)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockStoreMockRecorder) GetUserByUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockStore)(nil).GetUserByUsername), arg0, arg1)
}

// InsertHall mocks base method.
func (m *MockStore) InsertHall(arg0 context.Context, arg1 *models.Hall) (*models.Hall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertHall", arg0, arg1)
	ret0, _ := ret[0].(*models.Hall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertHall indicates an expected call of InsertHall.
func (mr *MockStoreMockRecorder) InsertHall(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertHall", reflect.TypeOf((*MockStore)(nil).InsertHall), arg0, arg1)
}

// InsertReservation mocks base method.
func (m *MockStore) InsertReservation(arg0 context.Context, arg1 *models.Reservation) (*models.Reservation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertReservation", arg0, arg1)
	ret0, _ := ret[0].(*models.Reservation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertReservation indicates an expected call of InsertReservation.
func (mr *MockStoreMockRecorder) InsertReservation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertReservation", reflect.TypeOf((*MockStore)(nil).InsertReservation), arg0, arg1)
}

// InsertUser mocks base method.
func (m *MockStore) InsertUser(arg0 context.Context, arg1 *models.User) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", arg0, arg1)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertUser indicates an expected call of InsertUser.
func (mr *MockStoreMockRecorder) InsertUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockStore)(nil).InsertUser), arg0, arg1)
}

// ListHalls mocks base method.
func (m *MockStore) ListHalls(arg0 context.Context) ([]models.Hall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHalls", arg0)
	ret0, _ := ret[0].([]models.Hall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHalls indicates an expected call of ListHalls.
func (mr *MockStoreMockRecorder) ListHalls(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHalls", reflect.TypeOf((*MockStore)(nil).ListHalls), arg0)
}

// ListMovies mocks base method.
func (m *MockStore) ListMovies(arg0 context.Context) ([]models.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMovies", arg0)
	ret0, _ := ret[0].([]models.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMovies indicates an expected call of ListMovies.
func (mr *MockStoreMockRecorder) ListMovies(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMovies", reflect.TypeOf((*MockStore)(nil).ListMovies), arg0)
}

// ListRepertoires mocks base method.
func (m *MockStore) ListRepertoires(arg0 context.Context) ([]models.Repertoire, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepertoires", arg0)
	ret0, _ := ret[0].([]models.Repertoire)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRepertoires indicates an expected call of ListRepertoires.
func (mr *MockStoreMockRecorder) ListRepertoires(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepertoires", reflect.TypeOf((*MockStore)(nil).ListRepertoires), arg0)
}

// SearchMovies mocks base method.
func (m *MockStore) SearchMovies(arg0 context.Context, arg1 string) ([]models.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchMovies", arg0, arg1)
	ret0, _ := ret[0].([]models.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchMovies indicates an expected call of SearchMovies.
func (mr *MockStoreMockRecorder) SearchMovies(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchMovies", reflect.TypeOf((*MockStore)(nil).SearchMovies), arg0, arg1)
}

// UpdateHall mocks base method.
func (m *MockStore) UpdateHall(arg0 context.Context, arg1 string, arg2 models.Hall) (models.Hall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHall", arg0, arg1, arg2)
	ret0, _ := ret[0].(models.Hall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateHall indicates an expected call of UpdateHall.
func (mr *MockStoreMockRecorder) UpdateHall(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHall", reflect.TypeOf((*MockStore)(nil).UpdateHall), arg0, arg1, arg2)
}

// UpdateMovie mocks base method.
func (m *MockStore) UpdateMovie(arg0 context.Context, arg1 string, arg2 *models.Movie) (*models.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMovie", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMovie indicates an expected call of UpdateMovie.
func (mr *MockStoreMockRecorder) UpdateMovie(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMovie", reflect.TypeOf((*MockStore)(nil).UpdateMovie), arg0, arg1, arg2)
}

// UpdateRepertoire mocks base method.
func (m *MockStore) UpdateRepertoire(arg0 context.Context, arg1 string, arg2 models.Repertoire) (*models.Repertoire, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRepertoire", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.Repertoire)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRepertoire indicates an expected call of UpdateRepertoire.
func (mr *MockStoreMockRecorder) UpdateRepertoire(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRepertoire", reflect.TypeOf((*MockStore)(nil).UpdateRepertoire), arg0, arg1, arg2)
}
